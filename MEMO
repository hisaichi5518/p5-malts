## Maltsを開発する時に注意する点

* フレームワークでの実装は極力少なくし、モジュールがある場合はそれを使用する
* Maltsの特徴に反する（遅くなる・分かりにくくなる）モジュールは使用しない
* テスト・ドキュメント・コードを一緒に書く
* 一つでも欠ければcommitしない(同時に3つコミットする)
* 記述方法には自由度を持たせてあるが、ベストプラクティスを用意し、初心者にも分かりやすい使い方を定める
* なぜそのコードを書くのか考えてから書く
* 使い方が間違ってる場合は、警告ではなくエラーを出す。
* （設定ファイルをロードしようとしているのに、ファイルがなかった場合はエラーなど）
* フレームワークが勝手に行う"よしなに"は死ね
* なぜそうするかを明確にする

## TODO
* Malts::*系
- use Malts::Plugin::SecurityHeaders;
- use Malts::Web::Request::OpenSocial;
- $c->request->requestor; とか？まだふわふわしてる

* App::malts(別dist)
- $ malts init Foo Template
- $ malts new Foo Template:tag
- git initとか出来たら良い。

## MEMO
* Styleにはコーディング規約も含める
* メソッドを生やすのはMalts::*
- Methodとかめんどい。
- Style同様に継承ではなく、Exporterを使う。

* $cにロジックを生やすのはイケてない。ただController向けに生やすのはいい気がする。
- $cには出来るだけ生やさない。
- RequestにあるべきものはRequestに突っ込む。
- Web APIを叩くとかは全部モジュール+Modelでする。悩むならmodelに入れとけばいいんじゃないのか系。
- Facebook, GitHubとかの認証はPlack::Middleware::OAuthを使う？ちょっと微妙なので優先度低。

* StyleでのModelはMalts::Style::Hoge::Model::* に入れる。
