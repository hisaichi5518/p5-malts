## Maltsを開発する時に注意する点

* フレームワークでの実装は極力少なくし、モジュールがある場合はそれを使用する
* Maltsの特徴に反する（遅くなる・分かりにくくなる）モジュールは使用しない
* テスト・ドキュメント・コードを一緒に書く
* 一つでも欠ければcommitしない(同時に3つコミットする)
* 記述方法には自由度を持たせてあるが、ベストプラクティスを用意し、初心者にも分かりやすい使い方を定める
* なぜそのコードを書くのか考えてから書く
* 使い方が間違ってる場合は、警告ではなくエラーを出す。
* （設定ファイルをロードしようとしているのに、ファイルがなかった場合はエラーなど）
* フレームワークが勝手に行う"よしなに"は死ね
* なぜそうするかを明確にする

## TODO
* ルーティングテーブル表示をプラグインで出来るようにする。
* PODがないStyleはクソだよねーみたいな
* Styleにはコーディング規約も含める

メソッドを生やすのはMalts::*
Methodとかめんどい。

* use Malts::Web::Render::Json qw(render_json); すると $c->render_json({}); が使えるようになる。みたいな。
Style同様に継承ではなく、Exporterを使う。

* use Malts::Web::Form::Shakan;
$c->form; はあれば便利かなー。

$cに生やしまくるのはイケてない。ただController向けに生やすのはいい気がする。
- $cには出来るだけ生やさない。
- RequestにあるべきものはRequestに突っ込む。
- Web APIを叩くとかは全部Modelでする。悩むならmodelに入れとけばいいんじゃないのか系。

Malts::Model::Auth::Facebookみたいなの実装するならモジュール作ればええんちゃう。

* StyleでのModelはMalts::Style::Hoge::Model::* に入れる。ここは悩み中

作り次第強制的に読み込む
* use Malts::Plugin::CSDFDefeneder;
* use Malts::Plugin::SecurityHeaders;

Request拡張
useでRequestに追加する

* use Malts::Web::Request::MobileAgent;
$c->request->mobile_agent;

* use Malts::Web::Request::OpenSocial;
$c->request->requestor; とか？まだふわふわしてる

