## Maltsを開発する時に注意する点

* フレームワークでの実装は極力少なくし、モジュールがある場合はそれを使用する
* Maltsの特徴に反する（遅くなる・分かりにくくなる）モジュールは使用しない
* テスト・ドキュメント・コード・Changesを同時にコミットする。
* なぜそのコードを書くのか考えてから書く
* 使い方が間違ってる場合は、警告ではなくエラーを出す。
* （設定ファイルをロードしようとしているのに、ファイルがなかった場合はエラーなど）
* フレームワークが勝手に行う"よしなに"は死ね
* なぜそうするかを明確にする
* Malts, Malts::Styleにベストプラクティスを用意し、初心者にも分かりやすい使い方を定める
* セキュリティ関係はフレームワークがなるべく行い、それを解除するのはそれなりにめんどくさくする。
* こういう事を防ぐため http://blog.sorah.jp/2012/03/05/mass-assignment-vulnerability-in-github

## Malts::Styleのドキュメントっぽいの

* Malts::Styleにはコーディング規約を含める。
* コーディング規約とは、設計・開発する時に注意する点・命名規則etc
* Malts::Style::*を使えば、それによって決められた規則に従うだけなのでコードを書く事だけに集中出来る。
* Malts::Styleを使えば、設計や命名規則を考える必要がない。

## Maltsを使う時の前提

* フレークワークのコードは結局読む事になる。
* 速さは必要ではあるが、致命的に遅くなる場合を除いて分かりやすさを優先すべき。
* XSは非常に強力ではあるが、強力すぎるので採用には慎重であるべき。

## TODO

* Malts::Auth(?)
* セキュリティのあれこれ
* PLACK_ENVがproductionの時、URLにdebugって入ってたらそのURLは無効？Basic認証？そもそも立ち上がらない？

立ち上がらないのはきついかな。
選択肢としてもっておくのもあり？
無効(404)はこの機能の事を忘れたらだるいので403とかにした方がいい。
use Malts::Router::NoDebug::Auth::Basic;
use Malts::Router::NoDebug::Die;

* $req->paramのバリデーション
FormValidator::Liteを使う

controllerの中で
use Malts::Web::FormValidator::Lite;
form_validator->check(
    name => [qw/NOT_NULL/],
    name_kana => [qw/NOT_NULL KATAKANA/],
    {mails => [qw/mail1 mail2/]} => ['DUPLICATION'],
);

MyApp.pmの中で
Text::Xslate->new(
    module => ['Malts::Web::FormValidator::Lite'],
);

テンプレートの中で

: if form_validator.has_error {
    : for form_validator.get_error_messages -> $err_message {
        <li><: $err_message :></li>
    : }
: }

* 処理時間であれこれする

use Malts::Web::RequestTimer;

configの中で

'Malts::Web::RequestTimer' => {
    on_finished => \&MyApp::Util::request_timer_callback,
}

package MyApp::Util;
sub request_timer_callback {
    my ($c, $start_time, $end_time, $diff_time) = @_;
    if ($diff_time > 1) {
        # ログ取ったりなんかしらする
    }
}

* $c->flash

## 設計メモ

* $cにロジックを生やすのはイケてない。ただ全部排除するのはイケてない。
$cはショートカットを生やすのはいい。=> $c->mobile_agent; など。$cは一括でデータを持つ場所と考える。
Web APIを叩くとかは全部モジュール + Modelでする。悩むならmodelに入れとけばいいんじゃないのか系。

こういうのはモデルでする。

    package MyApp::Model::Mobage;
    use 5.10.1;
    use strict;
    use warnings;
    use WebService::Mobage;
    use MyApp::Config;

    sub mobage_api {
        state $mobage = WebService::Mobage->new(config->{'WebService::Mobage'});
    }

    sub get_mobage_friends {
        my ($self, $user_id, $opts) = @_;
        $self->mobage_api->get_friends($user_id => $opts);
    }

* メソッドを生やすのはMalts::*
メソッドを生やすのはExporterを使う。=> 他のモジュールと同じような仕組みで提供する

* StyleでのModelはMalts::Style::Hoge::Model::* に入れる。

$cに保存するのは、アクセスする度に変更があり、かつキャッシュする必要があるもの。
request、sessionなど。

stateで保存するのは、起動すれば変更がないもの。
app_dirやroutesなど。
